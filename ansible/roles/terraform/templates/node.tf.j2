data "openstack_images_image_v2" "{{ inventory_hostname }}" {
  name = "{{ hostvars[inventory_hostname].node_image_name }}"
}

{% for volume in hostvars[inventory_hostname].node_volumes | default([]) %}

resource "openstack_blockstorage_volume_v3" "{{ inventory_hostname }}_{{ volume.label }}" {
    name = "{{ inventory_hostname }}-{{ cluster_name }}-{{ volume.label }}" # TODO: fixme
    description = "{{ volume.description | default('') }}"
    size = {{ volume.size }}
}

{% endfor %}

resource "openstack_networking_port_v2" "{{ inventory_hostname }}" {

  name = "{{ inventory_hostname }}.{{ cluster_name }}.{{ cluster_tld }}"
  network_id = data.openstack_networking_network_v2.cluster_net.id
  admin_state_up = "true"

  fixed_ip {
    subnet_id = data.openstack_networking_subnet_v2.cluster_subnet.id
  }

  security_group_ids = [
  {% for secgroup in hostvars[inventory_hostname].node_security_groups %}
    data.openstack_networking_secgroup_v2.{{ secgroup }}.id,
  {% endfor %}
  ]

  binding {
    vnic_type = "{{ hostvars[inventory_hostname].node_vnic_type }}"
    profile = "{{ hostvars[inventory_hostname].node_vnic_profile | to_json }}"
  }
}

resource "openstack_compute_instance_v2" "{{ inventory_hostname }}" {
  
  name = "{{ inventory_hostname }}.{{ cluster_name }}.{{ cluster_tld }}"
  image_name = data.openstack_images_image_v2.{{ inventory_hostname }}.name
  flavor_name = "{{ hostvars[inventory_hostname].node_flavor }}"
  key_pair = "{{ cluster_key_pair }}"
  
  {% if hostvars[inventory_hostname].node_volumes | default([]) | length %}
  # root device:
  block_device {
      uuid = data.openstack_images_image_v2.{{ inventory_hostname }}.id
      source_type  = "image"
      destination_type = "local"
      boot_index = 0
      delete_on_termination = true
  }
  {% endif %}

  {% for volume in hostvars[inventory_hostname].node_volumes | default([]) %}
  block_device {
      destination_type = "volume"
      source_type  = "volume"
      boot_index = -1
      uuid = openstack_blockstorage_volume_v3.{{ inventory_hostname }}_{{ volume.label }}.id
  }
  {% endfor %}

  network {
    port = openstack_networking_port_v2.{{ inventory_hostname }}.id
    access_network = true
  }

  metadata = {
    environment_root = "{{ appliances_environment_root }}"
  }

  {% if node_user_data is defined and node_user_data != '' %}
  user_data = <<-EOT
      {{ node_user_data | indent(6) }}
  EOT
  {% endif %}

  lifecycle{
    ignore_changes = [{{ node_tf_ignore_changes | join(', ') }}]
  }

}
