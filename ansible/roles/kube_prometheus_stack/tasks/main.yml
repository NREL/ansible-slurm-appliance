---

- name: Creating namespace
  kubernetes.core.k8s:
    name: "{{ kube_prometheus_stack_release_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

# Because of the way Helm handles CRDs, we upgrade them first
- name: Get kube-prometheus-stack CRDs
  command: >-
    helm show crds
      {{ kube_prometheus_stack_chart_name }}
      --repo {{ kube_prometheus_stack_chart_repo }}
      --version {{ kube_prometheus_stack_chart_version }}
  register: kube_prometheus_stack_crds

- name: Install kube-prometheus-stack CRDs
  # Use server-side apply because some of the CRDs are too big to fit in the annotation
  command: kubectl apply --server-side=true --force-conflicts=true -f -
  args:
    stdin: "{{ kube_prometheus_stack_crds.stdout }}"

- name: Disable rancher default storage class
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    state: patched
    definition:
      kind: StorageClass
      metadata:
        name: local-path
        annotations:
          storageclass.kubernetes.io/is-default-class: "false"

# variables would need refactoring to let us loop through the data directories nicely
- name: Create Prometheus hostPath volume in /var/lib/state
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: prometheus-dir
        labels:
          app.kubernetes.io/name: prometheus-dir
      spec:
        capacity:
          storage: "{{ kube_prometheus_stack_volume_size }}"
        accessModes:
        - ReadWriteOnce
        hostPath:
          path: "{{ prometheus_db_dir }}"
          type: DirectoryOrCreate

- name: Create Grafana hostPath volume in /var/lib/state
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: grafana-dir
        labels:
          app.kubernetes.io/name: grafana-dir
      spec:
        capacity:
          storage: "{{ grafana_claim_size }}"
        accessModes:
        - ReadWriteOnce
        hostPath:
          path: "{{ grafana_data_dir }}"
          type: DirectoryOrCreate

- name: Create PVC for Grafana
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: grafana-pvc
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "{{ grafana_claim_size }}"
        volumeMode: Filesystem
        volumeName: grafana-dir

# not looping through these because templating doesn't set ports as integer
- name: Creating headless service for OOD exporter
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      kind: Service
      metadata:
        name: ood-exporter
      spec:
        clusterIP: None
        ports:
        - name: ood-exporter
          port: 9301
          protocol: TCP

- name: Binding OOD exporter service to host
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      kind: Endpoints
      metadata:
        name: ood-exporter
      subsets:
        - addresses:
            - ip: "{{ login_ip }}"
          ports:
            - port: 9301
              name: ood-exporter
              protocol: TCP

- name: Creating headless service for slurm exporter
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      kind: Service
      metadata:
        name: slurm-exporter
      spec:
        clusterIP: None
        ports:
        - name: slurm-exporter
          port: 9341
          protocol: TCP

- name: Binding slurm exporter service to host
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      kind: Endpoints
      metadata:
        name: slurm-exporter
      subsets:
        - addresses:
            - ip: "{{ control_ip }}"
          ports:
            - port: 9341
              name: slurm-exporter
              protocol: TCP

- name: Creating headless service for opensearch datasource
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      kind: Service
      metadata:
        name: opensearch
      spec:
        clusterIP: None
        ports:
        - name: opensearch
          port: 9200
          protocol: TCP

- name: Binding opensearch service to host
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    definition:
      kind: Endpoints
      metadata:
        name: opensearch
      subsets:
        - addresses:
            - ip: "{{ control_ip }}"
          ports:
            - port: 9200
              name: opensearch
              protocol: TCP

- name: Import grafana dashboards
  ansible.builtin.import_role:
    name: grafana-dashboards

- name: Install kube-prometheus-stack on target Kubernetes cluster
  kubernetes.core.helm:
    chart_ref: "{{ kube_prometheus_stack_chart_name }}"
    chart_repo_url: "{{ kube_prometheus_stack_chart_repo }}"
    chart_version: "{{ kube_prometheus_stack_chart_version }}"
    release_namespace: "{{ kube_prometheus_stack_release_namespace }}"
    release_name: "{{ kube_prometheus_stack_release_name }}"
    release_values: "{{ kube_prometheus_stack_release_values }}"
    atomic: yes
    create_namespace: no
    wait: yes
    wait_timeout: "{{ kube_prometheus_stack_wait_timeout }}"

# Again can't loop through these because the k8s module doesn't like templating ints
- name: Opening NodePort for Prometheus
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    name: prometheus-external
    definition:
      kind: Service
      spec:
        type: NodePort
        selector:
          app.kubernetes.io/name: prometheus
        ports:
          - port: 9090
            nodePort: 30000

- name: Opening NodePort for Grafana
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    name: grafana-external
    definition:
      kind: Service
      spec:
        type: NodePort
        selector:
          app.kubernetes.io/name: grafana
        ports:
          - port: 3000
            nodePort: 30001

- name: Opening NodePort for Alertmanager
  kubernetes.core.k8s:
    namespace: "{{ kube_prometheus_stack_release_namespace }}"
    name: alertmanager-external
    definition:
      kind: Service
      spec:
        type: NodePort
        selector:
          app.kubernetes.io/name: alertmanager
        ports:
          - port: 9093
            nodePort: 30002
