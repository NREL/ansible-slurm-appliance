---

- name: Up default resource limits
  copy:
    content: |
      # WARNING: This file is managed by ansible, do not modify.
      # This is so non-root containers can use more resources. This is useful
      # for opendistro.
      * soft memlock unlimited
      * hard memlock unlimited
      * soft nofile 65536
      * hard nofile 65536
    dest: /etc/security/limits.d/custom.conf
  become: true

- name: Up default keys permitted
  ansible.posix.sysctl:
    name: kernel.keys.maxkeys # /proc/sys/kernel/keys/maxkeys
    value: 50000
  become: true

- name: reset ssh connection to allow user changes to affect 'current login user'
  meta: reset_connection

- name: Ensure podman users exist
  user: "{{ item }}"
  with_items: "{{ podman_users }}"
  register: podman_user_info
  become: yes

- name: Define tmp directories on tmpfs
  blockinfile:
    path: /etc/tmpfiles.d/podman.conf
    create: yes
    block: |
      d {{ podman_tmp_dir_root }}/{{ item.name }}/libpod/tmp 0755 {{ item.name }} {{ item.name }}
      Z {{ podman_tmp_dir_root }}/{{ item.name }}            0755 {{ item.name }} {{ item.name }}
  become: yes
  loop: "{{ podman_users }}"
  register: podman_tmp_dirs

- name: Create tmp directories
  command: systemd-tmpfiles --create
  become: true
  when: podman_tmp_dirs.results | selectattr('changed') | list | length > 0 # when: any changed

- name: Create podman configuration directories
  file:
    path: "{{ item.home }}/.config/containers/"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  become: yes
  loop: "{{ podman_user_info.results }}"

- name: Set podman to use temp directories
  community.general.ini_file:
    path: "{{ item.home }}/.config/containers/containers.conf"
    section: engine
    option: tmp_dir
    value: '"{{ podman_tmp_dir_root }}/{{ item.name }}/libpod/tmp"'
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    create: yes
  loop: "{{ podman_user_info.results }}"
  become: yes
  register: podman_tmp

- name: Reset podman database
  # otherwise old config overrides!
  command:
    cmd: podman system reset --force
  become: yes
  become_user: "{{ item.item.name }}"
  when: item.changed
  loop: "{{ podman_tmp.results }}"
  loop_control:
    label: "{{ item.item.name }}"

- name: Check whether cgroups v2 is enabled
  stat:
    path:  /sys/fs/cgroup/cgroup.controllers
  register: _stat_cgroup

- name: Enable cgroups v2
  # grubby output/rc doesn't change whether or not its added something
  command:
    cmd: 'grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=1"'
  when: not _stat_cgroup.stat.exists
  changed_when: not _stat_cgroup.stat.exists
  become: yes

- name: Set reboot flag
  set_fact:
    podman_reboot_required: true
  when: not _stat_cgroup.stat.exists

- name: Check if users have lingering enabled
  stat:
    path: "/var/lib/systemd/linger/{{ item }}"
  register: _stat_linger
  loop: "{{ podman_users | map(attribute='name') }}"
  become: yes

- name: Enable user lingering
  command:
    cmd: "loginctl enable-linger {{ item.item }}"
  loop: "{{ _stat_linger.results }}"
  when: not item.stat.exists
  become: yes

- name: Fix broken systemd cgroups - make directory
  file:
    path: /etc/systemd/system/user-.slice.d/
    state: directory
    owner: root
    group: root
  become: yes

- name: Fix broken systemd cgroups - create file
  # See https://bugzilla.redhat.com/show_bug.cgi?id=1897579#c50
  copy:
    dest: /etc/systemd/system/user-.slice.d/override.conf
    content: |
      [Slice]
      Slice=user.slice

      CPUAccounting=yes
      MemoryAccounting=yes
      IOAccounting=yes
      TasksAccounting=yes
    owner: root
    group: root
  become: yes
  register: _copy_cgroups

- name: Reload systemd
  command:
    cmd: systemctl daemon-reload
  # set_fact:
  #   podman_reboot_required: true
  become: yes
  when: _copy_cgroups.changed
