---

- hosts: cluster
  gather_facts: true
  become: yes
  tasks:
    - name: Get homedir for ansible_user # note ansible_env.HOME is /root when using become!
      user:
        name: "{{ ansible_user }}"
        state: present
      register: connection_user
    - block:
        - name: Copy ansible_user homedir
          ansible.posix.synchronize:
            src: "{{ connection_user.home }}/" # trailing-/ needed so we don't copy the directory itself, just contents
            dest: "{{ ansible_user_home }}"
            delete: yes
            recursive: yes
          delegate_to: "{{ inventory_hostname }}"
        - name: modify /etc/passwd
          replace:
            path: /etc/passwd
            regexp: "{{ connection_user.home }}"
            replace: "{{ ansible_user_home }}"
      when:
        - ansible_user_home is defined
        - "connection_user.home != ansible_user_home"
    - meta: reset_connection # needed for same "when" conditions but does not support conditional
    - name: delete old homedir
      file:
        path: "{{ connection_user.home }}"
        state: absent
      when:
        - ansible_user_home is defined
        - "connection_user.home != ansible_user_home"
        
    - name: Add users
      ansible.builtin.user: "{{ item }}"
      with_items: "{{ appliances_local_users }}"

- hosts: selinux
  gather_facts: false
  become: yes
  tags:
    - selinux
  tasks:
    - name: Set SELinux state and policy
      ansible.posix.selinux:
        state: "{{ selinux_state }}"
        policy: "{{ selinux_policy }}"
      register: sestatus
    - name: Reboot if required to change SELinux state
      reboot:
      when: sestatus.reboot_required
    - name: Wait for hosts to be reachable
      wait_for_connection:
        delay: 30
        sleep: 5
      when: sestatus.reboot_required
    - name: update facts
      setup:
      when: sestatus.changed

- hosts: update
  gather_facts: false
  become: yes
  tags:
    - update
  tasks:
    - name: Update selected packages
      yum:
        name: "{{ update_name }}"
        state: "{{ update_state }}"
        exclude: "{{ update_exclude }}"
      when: "update_enable | default('false') | bool"
