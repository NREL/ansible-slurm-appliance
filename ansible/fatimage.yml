# Builder version of site.yml just installing binaries

- hosts: builder
  become: no
  gather_facts: no
  tasks:
    - name: Report hostname (= final image name)
      command: hostname

- name: Run pre.yml hook
  vars:
    appliances_environment_root: "{{ lookup('env', 'APPLIANCES_ENVIRONMENT_ROOT') }}"
    hook_path: "{{ appliances_environment_root }}/hooks/pre.yml"
  import_playbook: "{{ hook_path if hook_path | exists else 'noop.yml' }}"
  when: hook_path | exists

- import_playbook: bootstrap.yml

- name: Run post-bootstrap.yml hook
  vars:
    appliances_environment_root: "{{ lookup('env', 'APPLIANCES_ENVIRONMENT_ROOT') }}"
    hook_path: "{{ appliances_environment_root }}/hooks/post-bootstrap.yml"
  import_playbook: "{{ hook_path if hook_path | exists else 'noop.yml' }}"
  when: hook_path | exists

- hosts: builder
  become: yes
  gather_facts: no
  tasks:
    # - import_playbook: iam.yml
    - name: Install FreeIPA client
      import_role:
        name: freeipa
        tasks_from: client-install.yml
      when: "'freeipa_client' in group_names"

    # - import_playbook: filesystems.yml:
    - name: Install nfs packages
      dnf:
        name: nfs-utils
      when: "'nfs' in group_names"
    - name: Install Manila client packages
      include_role:
        name: stackhpc.os-manila-mount
        tasks_from: install.yml
      when: "'manila' in group_names"

- import_playbook: extras.yml

- hosts: builder
  become: yes
  gather_facts: yes
  tasks:
    # - import_playbook: slurm.yml:
    - name: Setup DB
      include_role:
        name: mysql
        tasks_from: install.yml
      when: "'mysql' in group_names"
    - name: OpenHPC
      import_role:
        name: stackhpc.openhpc
        tasks_from: install.yml
      when: "'openhpc' in group_names"

    # - import_playbook: portal.yml
    - name: Open Ondemand server (packages)
      include_role:
        name: osc.ood
        tasks_from: install-package.yml
        vars_from: "Rocky/{{ ansible_distribution_major_version }}.yml"
      when: "'openondemand' in group_names"
    # # FUTURE: install-apps.yml - this is git clones

    - name: Open Ondemand server (apps)
      include_role:
        name: osc.ood
        tasks_from: install-apps.yml
        vars_from: "Rocky/{{ ansible_distribution_major_version }}.yml"
      when: "'openondemand' in group_names"

    - name: Open Ondemand remote desktop
      import_role:
        name: openondemand
        tasks_from: vnc_compute.yml
      when: "'openondemand_desktop' in group_names"
    - name: Open Ondemand jupyter node
      import_role:
        name: openondemand
        tasks_from: jupyter_compute.yml
      when: "'openondemand' in group_names"

    # - import_playbook: monitoring.yml:
    - import_role:
        name: opensearch
        tasks_from: install.yml
      when: "'opensearch' in group_names"
    # slurm_stats - nothing to do
    - import_role:
        name: filebeat
        tasks_from: install.yml
      when: "'filebeat' in group_names"

    - name: openondemand exporter
      dnf:
        name: ondemand_exporter
      when: "'openondemand' in group_names"

    - name: slurm exporter
      import_role:
        name: slurm_exporter
        tasks_from: install
      vars:
        slurm_exporter_state: stopped
      when: "'slurm_exporter' in group_names"

- hosts: builder
  name: Pre-pull kube-prometheus-stack images and import to k3s
  vars:
    image_list:
      - { name: "docker.io/grafana/grafana", tag: "{{ grafana_image_tag }}" }
      - { name: "quay.io/prometheus/prometheus", tag: "{{ prometheus_image_tag }}" }
      - { name: "quay.io/prometheus/alertmanager", tag: "{{ alertmanager_image_tag }}" }
      - { name: "quay.io/prometheus-operator/node-exporter", tag: "{{ node_exporter_image_tag }}" }
      - { name: "quay.io/prometheus-operator/prometheus-config-reloader", tag: "{{ kube_prometheus_stack_app_version }}" }
      - { name: "quay.io/prometheus-operator/prometheus-operator", tag: "{{ kube_prometheus_stack_app_version }}" }
      - { name: "quay.io/kiwigrid/k8s-sidecar", tag: "{{ grafana_sidecar_image_tag }}" }
      - { name: "registry.k8s.io/kube-state-metrics/kube-state-metrics", tag: "{{ kube_prometheus_stack_metrics_image_tag }}" }
      - { name: "registry.k8s.io/ingress-nginx/kube-webhook-certgen", tag: "{{ kube_prometheus_stack_patch_image_tag }}" }
  tasks:
    - name: Pull with images with podman
      containers.podman.podman_image:
        name: "{{ item.name }}"
        tag: "{{ item.tag }}"
      loop: "{{ image_list }}"

    - name: Export images to k3s
      containers.podman.podman_save:
        image: "{{ item.name }}:{{ item.tag }}"
        dest: "/var/lib/rancher/k3s/agent/images/{{ item.name | regex_replace('\\/|\\.','-')}}.tar"
      loop: "{{ image_list }}"

    - name: Clean up podman images
      containers.podman.podman_image:
        state: absent
        name: "{{ item.name }}"
        tag: "{{ item.tag }}"
      loop: "{{ image_list }}"

- name: Run post.yml hook
  vars:
    appliances_environment_root: "{{ lookup('env', 'APPLIANCES_ENVIRONMENT_ROOT') }}"
    hook_path: "{{ appliances_environment_root }}/hooks/post.yml"
  import_playbook: "{{ hook_path if hook_path | exists else 'noop.yml' }}"
  when: hook_path | exists

- hosts: builder
  become: yes
  gather_facts: yes
  tags: finalise
  tasks:
    - name: Cleanup image
      import_tasks: cleanup.yml

    - name: Shutdown Packer VM
      community.general.shutdown:
