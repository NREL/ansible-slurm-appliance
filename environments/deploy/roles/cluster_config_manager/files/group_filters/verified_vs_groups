#!/usr/bin/env python3

import json
import os
import requests
import time
import yaml
from optparse import OptionParser
from subprocess import Popen, PIPE

allocations_db_user = None
allocations_db_pw = None

extra_groups = ["g09", "n-admin", "n-apps", "n-ecom", "gams", "vasp", "esp-buildstock"]


def read_ansible_config(vault_file="/nopt/nrel/admin/cluster_config_manager/vault", secret_file="/nopt/nrel/admin/cluster_config_manager/allocation_vars_crypted.yml"):
    CONFIGS = {}
    p = Popen(["ansible-vault", "view", "--vault-password-file=%s" % vault_file, secret_file], stdout=PIPE)
    stream = p.communicate()[0]
    if not p.returncode == 0:
        raise Exception("Failed to open ansible vault file %s using secret file %s" % (vault_file, secret_file))
    CONFIGS = yaml.load(stream)
    return CONFIGS


def get_systems():
    """
    Get List of HPC Systems
    """
    return ("Peregrine", "Gyrfalcon", "Eagle", "vermilion")


def get_host_system(system):
    """
    Get host system for a particular HPC system, the host system is the server that you apply the configuration to
    """
    host_system_lookup = {"Peregrine": "admin2", "Gyrfalcon": "gyrfalcon-mds.hpc.nrel.gov", "Eagle": "emgmt1", "vermilion": "vs-admin"}
    if system in host_system_lookup:
        return host_system_lookup[system]
    else:
        raise Exception("Host System lookup for system %s failed" % system)

def get_datasets(system):
    """
    Return list of the datasets. Example: [{"path": "/user1", "group": "abcdef", "owner": "user1", "mode": "755"}]
    """
    datasets = []

    os.environ['REQUESTS_CA_BUNDLE'] = os.path.join('/etc/ssl/certs/','wildcard.hpc.nrel.gov.bundle.crt')
    CONFIGS = read_ansible_config()
    r = requests.get('https://lex.hpc.nrel.gov/api/projects/allocatedstorage', auth=(CONFIGS['USERNAME'], CONFIGS['PASSWD']), verify=False, timeout=60)

    if r.status_code == requests.codes.ok:
        json_data = r.json()
    else:
        print(r.status_code)
        raise Exception("Unable to query lex")

    for dataset in json_data:
        cr_system = dataset["system"]
        cr_handleid = dataset["project"]["project_handle"]
        cr_mountpoint = dataset["mount_point"]
        cr_group = dataset["idm_group"]
        cr_pi = dataset["project"]["hpc_lead_person"]
        mode = dataset["permissions"]

        if (cr_system == system):
            if (cr_group == None):
                #print("Warning: handle %s is missing an IDM group" % cr_handleid)
                pass
            else:
                datasets.append({"path": cr_mountpoint, "group": cr_group, "mode": "2770"})

    # Test Data below, will query the allocation databas later to collect this data
    return datasets

def main():
    """
    Main Entry
    """
    hostgroups = {}

    parser = OptionParser()
    parser.add_option("-l", "--list", dest="list", action="store_false")
    parser.add_option("-s", "--host", dest="host", action="store_false")
    (options, args) = parser.parse_args()
    if (options.host is not None):
        Exception("Currently do not support the --host option, only --list")
        exit(0)
    if (options.list is None):
        parser.print_help()
        exit(0)

    read_ansible_config()

    data_groups = {}
    system = "vermilion"
    datasets = get_datasets(system)
    for dataset in datasets:
        if dataset["group"] not in data_groups:
            data_groups[dataset["group"]] = True

    print("\n".join(list(data_groups.keys()) + extra_groups))


if __name__ == "__main__":
    """
    Example JSON out
    {"group_inventorylist_name": {"hosts": ["host1","host2"], "vars": {"datasets_mountpoints": [{"path": "/user1","group": "abcdef", "owner": "user1", "mode": "755"}]}]}}
    """
    main()
