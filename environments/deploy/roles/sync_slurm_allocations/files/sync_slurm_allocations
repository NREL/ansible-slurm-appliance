#!/usr/bin/env python3
__version__ = "1.0.0"
__author__ = "David Whiteside"

import os
import json
import time
import yaml
from optparse import OptionParser
from subprocess import Popen, PIPE
import subprocess
import requests
import re
import pipes


class SyncSlurmAccounting(object):
    """  Sync Slurm Accounts with the allocation database"""

    def __init__(self, cluster_name, vault_file, vault_secret_file, checkmode=False, addonly=False, force_delete_accounts=False, slurm_path="/nopt/slurm/current/bin", do_account_create=False):
        """ Init """
        self.checkmode = checkmode
        self.addonly = addonly
        self.force_delete_accounts = force_delete_accounts
        self.cluster_name = cluster_name
        self.vault_file = vault_file
        self.vault_secret_file = vault_secret_file
        self.allocations = {}
        self.slurm_allocations = {}
        self.allocation_titles = {}
        self.slurm_path = slurm_path
        self.do_account_create = do_account_create
        self.__get_current_slurm_allocations()

    def __run_cmd(self, cmd):
        p = subprocess.Popen("echo y| " + cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        retval = p.wait()
        return retval

    def __get_allocation_users(self, allocation):
        try:
            output = subprocess.check_output(['getent', 'group', allocation])
            output_list = output.strip().decode("utf-8").split(":")
            group_data = {"members": output_list[3].split(",")}
        except subprocess.CalledProcessError:
            return None  # Group does not exist

        if 'members' in dict(group_data) and group_data["members"][0] != "":
            return group_data['members']
        else:
            return []  # Assume empty group

    def __read_ansible_config(self):
        CONFIGS = {}
        p = Popen(["ansible-vault", "view", "--vault-password-file=%s" % self.vault_file, self.vault_secret_file], stdout=PIPE)
        stream = p.communicate()[0]
        if not p.returncode == 0:
            raise Exception("Failed to open ansible vault file %s using secret file %s" % (self.vault_file, self.vault_secret_file))
        CONFIGS = yaml.load(stream, Loader=yaml.SafeLoader)
        return CONFIGS

    def __get_allocations(self):
        """
        get list of the allocations. Example: [group1,group2]
        """
        CONFIGS = self.__read_ansible_config()
        r = requests.get('https://lex.hpc.nrel.gov/api/projects/allocatedaus/?fy=FY21&format=json&system=%s' % self.cluster_name, auth=(CONFIGS['USERNAME'], CONFIGS['PASSWD']), verify=True, timeout=60)

        if r.status_code == requests.codes.ok:
            json_data = r.json()
        else:
            raise Exception("Unable to query lex")

        for allocation in json_data:
            cr_handleid = allocation["project"]["project_handle"]
            cr_group = allocation["idm_group"]["name"]
            cr_title = allocation["project"]["hpc_project_title"]
            cr_members = allocation["idm_group"]["members"]

            if cr_group not in self.allocations:
                if cr_members is not None:
                    self.allocations[cr_group] = cr_members
                else:
                    print("Group %s does not exist for allocation %s" % (cr_group, cr_handleid))
                    if cr_title not in self.allocation_titles:
                        self.allocation_titles[cr_group] = cr_title

    def __slurm_create_account(self, accountname, description, org):
        """ create a slurm account/allocation """
        if self.checkmode or self.do_account_create == False:
            print("CheckMode or skipping - Creating slurm account %s" % accountname)
        else:
            self.__run_cmd('%s/sacctmgr add account "%s" Description="%s" Organization="%s"' % (self.slurm_path, pipes.quote(accountname), pipes.quote(description.replace("'", ' ').replace('"', ' ')), pipes.quote(org)))
            self.slurm_allocations[accountname] = []

    def __slurm_delete_account(self, accountname):
        """ delete a slurm account/allocation """
        if self.checkmode:
            if self.force_delete_accounts:
                print("CheckMode - Force deleting slurm account %s, you will lost historical data about the account" % accountname)
            else:
                print("CheckMode - Removing all users from inactive slurm account %s, preserving the account data" % accountname)
        else:
            print("TODO - Removing all users from inactive slurm account %s, preserving the account data" % accountname)
            if self.force_delete_accounts:
                print("Force deleting slurm account %s, you will lost historical data about the account" % accountname)
                self.__run_cmd('%s/sacctmgr del account "%s"' % (self.slurm_path, pipes.quote(accountname)))

    def __slurm_add_to_account(self, accountname, user):
        if self.checkmode:
            print("CheckMode - Adding user %s to slurm account %s" % (user, accountname))
        else:
            print("Adding user %s to slurm account %s" % (user, accountname))
            self.__run_cmd('%s/sacctmgr add user "%s" Account="%s"' % (self.slurm_path, pipes.quote(user), pipes.quote(accountname)))

    def __slurm_remove_from_account(self, accountname, user):
        if self.checkmode:
            print("CheckMode - Removing user %s to slurm account %s" % (user, accountname))
        else:
            print("Removing  user %s to slurm account %s" % (user, accountname))
            self.__run_cmd('%s/sacctmgr del user "%s" Account="%s"' % (self.slurm_path, pipes.quote(user), pipes.quote(accountname)))

    def __is_valid_user(self, username):
        try:
            output = subprocess.check_output(['getent', 'passwd', username])
            output_list = output.strip().decode("utf-8").split(":")
            user_data = {"name": output_list[0], "shell": output_list[6], "uid": int(output_list[2])}
            if user_data["name"] == "root" or user_data["shell"] == "/sbin/nologin" or user_data["uid"] < 1024:
                return False  # exclude local accounts, root, or shells with no login
            return True
        except subprocess.CalledProcessError:
            return False  # User does not exist

    def __get_current_slurm_allocations(self):
        """ Return dict of allocations that contain a list of its members """
        allocation_match = re.compile(r"^\s*(%s)\|(.*?)\|(.*?)\|" % self.cluster_name)

        p = subprocess.Popen(["%s/sacctmgr" % (self.slurm_path), "list", "association", "-p"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = p.communicate()
        for line in stdout.decode("utf-8").split('\n'):
            m = allocation_match.match(line.strip())
            if m:
                cluster_name = m.group(1)
                allocation_name = m.group(2)
                user_name = m.group(3)
                if allocation_name not in self.slurm_allocations:
                    self.slurm_allocations[allocation_name] = []
                if self.__is_valid_user(user_name):
                    self.slurm_allocations[allocation_name].append(user_name)

    def sync_allocations(self):
        """ Sync the allocations in the database to the running slurm """
        # Get Active allocation groups from the allocation database
        self.__get_allocations()

        # Add allocations
        for allocation in self.allocations:
            if allocation not in self.slurm_allocations:
                if allocation in self.allocation_titles:
                    self.__slurm_create_account(allocation, self.allocation_titles[allocation], "NREL")
                else:
                    self.__slurm_create_account(allocation, "undefined", "NREL")
            allocation_users = self.__get_allocation_users(allocation)
            if allocation_users is not None:
                for username in allocation_users:
                    if username is not None and username not in self.slurm_allocations[allocation]:
                        self.__slurm_add_to_account(allocation, username)

        # Remove allocations/users
        if self.addonly is not True:
            for allocation in self.slurm_allocations:
                for username in self.slurm_allocations[allocation]:
                    allocation_users = self.__get_allocation_users(allocation)
                    if allocation_users is not None and username not in allocation_users:
                        self.__slurm_remove_from_account(allocation, username)
                if allocation not in self.allocations:
                    self.__slurm_delete_account(allocation)


def main():
    """
    Main Entry
    """
    # CLI Options
    parser = OptionParser()
    parser.add_option("-c", "--check", dest="checkmode", action="store_true")
    parser.add_option("-a", "--add-only", dest="addonly", action="store_true")
    parser.add_option("-n", "--cluster-name", dest="clustername")
    parser.add_option("-v", "--vault-file", dest="vaultfile")
    parser.add_option("-s", "--vault-secret-file", dest="vaultsecretfile")
    # force delete account data vs just removing all the users from the account
    parser.add_option("-f", "--force-delete-accounts", dest="force_delete_accounts", action="store_true")
    parser.add_option("-m", "--slurm-path", dest="slurm_path")
    parser.add_option("-d", "--do-account-create", dest="do_account_create", action="store_true")

    (options, args) = parser.parse_args()

    sync_slurm_accounting = SyncSlurmAccounting(checkmode=options.checkmode,
                                                addonly=options.addonly,
                                                force_delete_accounts=options.force_delete_accounts,
                                                cluster_name=options.clustername,
                                                vault_file=options.vaultfile,
                                                slurm_path=options.slurm_path,
                                                do_account_create=options.do_account_create,
                                                vault_secret_file=options.vaultsecretfile)

    # Sync Active allocation groups from the allocation database
    sync_slurm_accounting.sync_allocations()


if __name__ == "__main__":
    main()
