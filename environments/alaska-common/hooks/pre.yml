- name: workaround no internal DNS
  hosts:
    - cluster
  become: true
  tags: etc_hosts
  tasks:
    - name: Internal DNS workaround - generate /etc/hosts file content
      # which interface is used as ansible_host is defined by terraform (see `access_network`) so this is deterministic for multi-rail hosts
      set_fact:
        etc_hosts_content: |
          {% for host in groups['cluster'] %}{{ hostvars[host]['ansible_host'] }} {{ host }}.novalocal {{ host }}
          {% endfor %}
      run_once: true
    - name: Internal DNS workaround  - create entries in /etc/hosts for all nodes
      blockinfile:
        path: /etc/hosts
        create: yes
        state: present
        block: "{{ hostvars[ansible_play_hosts[0]].etc_hosts_content }}"
  
- name: Install Mellanox OFED
  hosts: disabled
  become: true
  tags: ofed
  tasks:
    - import_role: # NB: this will change the kernel if necessary!
        name: stackhpc.ofed
    - name: Reboot if required from kernel change
      reboot:
        post_reboot_delay: 30
      when: grub_update_result.changed
    # - name: Wait for hosts to be reachable
    #   wait_for_connection:
    #     sleep: 15
    - name: update facts
      setup:
      when: (sestatus.changed | default(false)) or (sestatus.reboot_required | default(false))

- name: Configure RDMA for nfs
  hosts: nfs
  become: true
  tags: nfs
  tasks:
    - name: Enable svcrdma module at boot
      file:
        path: /etc/modules-load.d/svcrdma.conf
        state: touch
        access_time: preserve
        modification_time: preserve
    - name: Load svcrdma module
      community.general.modprobe:
        name: svcrdma
    - name: Configure NFS server(s) for RDMA
      # NB: Works because nfs packages are installed in base image
      community.general.ini_file:
        path: /etc/nfs.conf
        section: nfsd
        option: rdma
        value: nfsrdma
      when: nfs_enable.server | bool or ('nfs_enable' in item and item.nfs_enable.server | bool)
      loop: "{{ nfs_configurations }}"


